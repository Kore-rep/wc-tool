/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ccwc;

import org.junit.Before;
import org.junit.Test;
import org.mockito.MockedStatic;

import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.containsString;
import static org.mockito.Mockito.*;

public class ClientTest {

    final ByteArrayOutputStream baos = new ByteArrayOutputStream();
    final String utf8 = StandardCharsets.UTF_8.name();

    @Before
    public void init() {
        // Reset StdOut
        System.setOut(new PrintStream(new FileOutputStream(FileDescriptor.out)));
        Client.options = null;
    }

    public void assignStdOutForCapture() throws IOException {
        PrintStream ps = new PrintStream(baos, true, utf8);
        System.setOut(ps);
    }

    @Test
    public void appGeneratesOptions() {
        Client.options = null; // Ensure options are empty before calling method
        assertNull(Client.options);
        Client.generateOptions();
        assertNotNull(Client.options);
    }

    @Test
    public void getNumBytesWorksOnSmall() {
        String testString = "123456";
        int bytes = Client.getNumBytes(testString);
        assertEquals("Equal Bytes Small", 6, bytes);
    }

    @Test
    public void getNumBytesWorksOnLarge() throws IOException {
        String testString = Files.readString(Paths.get("./src/test/resources/test.txt"));
        int bytes = Client.getNumBytes(testString);
        assertEquals("Equal Bytes Large", 342190, bytes);
    }

    @Test
    public void getNumLinesWorksOnSmall() {
        String testString = "firstLine\nSecond Line   \n third !3132 line";
        int bytes = Client.getNumLines(testString);
        assertEquals("Equal Lines Small", 3, bytes);
    }

    @Test
    public void getNumLinesWorksOnLarge() throws IOException {
        String testString = Files.readString(Paths.get("./src/test/resources/test.txt"));
        int bytes = Client.getNumLines(testString);
        assertEquals("Equal Lines Large", 7145, bytes);
    }

    @Test
    public void getNumCharsWorksOnSmall() {
        String testString = "some inter#sting chars!";
        int bytes = Client.getNumChars(testString);
        assertEquals("Equal Chars Small", 23, bytes);
    }

    @Test
    public void getNumCharsWorksOnLarge() throws IOException {
        String testString = Files.readString(Paths.get("./src/test/resources/test.txt"));
        int bytes = Client.getNumChars(testString);
        assertEquals("Equal Chars Large", 339292, bytes);
    }

    @Test
    public void getNumWordsWorksOnSmall() {
        String testString = "some inter#sting chars! and words";
        int bytes = Client.getNumWords(testString);
        assertEquals("Equal Words Small", 5, bytes);
    }

    @Test
    public void getNumWordsWorksOnLarge() throws IOException {
        String testString = Files.readString(Paths.get("./src/test/resources/test.txt"));
        int bytes = Client.getNumWords(testString);
        assertEquals("Equal Words Large", 58164, bytes);
    }

    @Test
    public void getFileDataWorks() {
        String data = Client.getFileData("./src/test/resources/testSmall.txt");
        String expected = "Sometest\nline 2";
        assertEquals(expected, data);
    }

    @Test
    public void getStdInDataWorks() {
        InputStream fakeIn = new ByteArrayInputStream("stdIn\nTest\bn1.".getBytes());
        System.setIn(fakeIn);
        String data = Client.getStdInData();
        String expected = "stdIn\nTest\bn1.";
        assertEquals(expected, data);
    }

    @Test
    public void printGenericHelpWorks() throws UnsupportedEncodingException {
        String expectedUsage = "usage: ccwc [OPTIONS]... [FILE]...";
        String expectedHeader = "Get the newline, word and bytecounts for each FILE";
        String expectedOptions = "-c,--bytes   print the byte count\n -h,--help    print help\n -l,--lines   print the newline count\n -m,--chars   print the character count\n -w,--words   print the word count\n";
        String expectedFooterTop = "Where no OPTIONS are provided, newline, word and byte-count will be\nreturned by default.";
        String expectedFooterMiddle = "Where no FILEs are provided, input will be read from StdIn";
        String expectedFooterBottom = "Author: Angus Longmore.\nhttps://github.com/kore-rep/wc-tool";
        Client.generateOptions();
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        final String utf8 = StandardCharsets.UTF_8.name();
        PrintStream ps = new PrintStream(baos, true, utf8);
        System.setOut(ps);
        Client.printGenericHelp();
        String data = baos.toString(utf8);
        assertThat(data, containsString(expectedUsage));
        assertThat(data, containsString(expectedHeader));
        assertThat(data, containsString(expectedOptions));
        assertThat(data, containsString(expectedFooterTop));
        assertThat(data, containsString(expectedFooterMiddle));
        assertThat(data, containsString(expectedFooterBottom));
    }

    @Test
    public void mainReturnsHelp_WhenOnlyOption() throws UnsupportedEncodingException {
        MockedStatic<Client> mockedStatic = mockStatic(Client.class);
        mockedStatic.when(() -> Client.printGenericHelp());
        try {
            Client.main(new String[] { "-h" });
        } catch (RuntimeException e) {
            // Catch to prevent System.exit() being called in the method.
        }
        mockedStatic.verify(
                () -> Client.printGenericHelp(),
                times(1));
        mockedStatic.close();
    }

    @Test
    public void mainReturnsBytes_WhenOnlyOption() throws IOException {
        assignStdOutForCapture();
        Client.main(new String[] { "-c", "./src/test/resources/test.txt" });
        String data = baos.toString(utf8);
        String expected = "  342190 ./src/test/resources/test.txt\n";
        assertEquals(expected, data);

    }

    @Test
    public void mainReturnsCharacters_WhenOnlyOption() throws IOException {
        assignStdOutForCapture();
        Client.main(new String[] { "-m", "./src/test/resources/test.txt" });
        String data = baos.toString(utf8);
        String expected = "  339292 ./src/test/resources/test.txt\n";
        assertEquals(expected, data);
    }

    @Test
    public void mainReturnsWords_WhenOnlyOption() throws IOException {
        assignStdOutForCapture();
        Client.main(new String[] { "-w", "./src/test/resources/test.txt" });
        String data = baos.toString(utf8);
        String expected = "  58164 ./src/test/resources/test.txt\n";
        assertEquals(expected, data);
    }

    @Test
    public void mainReturnsLines_WhenOnlyOption() throws IOException {
        assignStdOutForCapture();
        Client.main(new String[] { "-l", "./src/test/resources/test.txt" });
        String data = baos.toString(utf8);
        String expected = "  7145 ./src/test/resources/test.txt\n";
        assertEquals(expected, data);
    }

}
